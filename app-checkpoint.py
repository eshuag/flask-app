{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing python libraries\n",
    "from flask import Flask, request,render_template,redirect,jsonify,json\n",
    "from werkzeug.utils import secure_filename\n",
    "import base64\n",
    "import hashlib\n",
    "import time\n",
    "import os\n",
    "\n",
    "app = Flask(__name__)\n",
    " \n",
    "@app.route(\"/\")\n",
    "def hello():\n",
    "    return render_template(\"upload_image.html\")\n",
    "\n",
    "#setting up image folder path where images will be saved and defining allowed formats and max size of images\n",
    "app.config[\"IMAGE_UPLOADS\"]=r\"C:\\Users\\win-10\\flask\\image\"\n",
    "app.config[\"ALLOWED_IMAGE_EXT\"]=[\"JPEG\",\"PNG\",\"JPG\"]\n",
    "app.config[\"MAX_IMAGE_SIZE\"]=0.5*1024*1024\n",
    "\n",
    "#testing if the uploaded file has a valid extension or not\n",
    "def allowed_image(filename):\n",
    "    if not\".\" in filename:\n",
    "        return False\n",
    "    ext=filename.rsplit(\".\",1)[1]\n",
    "    if ext.upper() in app.config[\"ALLOWED_IMAGE_EXT\"]:\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "    \n",
    "    #testing if uploaded file hass a valid size\n",
    "def allowed_size(filesize):\n",
    "    if int(filesize)<=app.config[\"MAX_IMAGE_SIZE\"]:\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "\n",
    "@app.route(\"/success\",methods=['GET','POST'])\n",
    "#loading image \n",
    "def success():\n",
    "    if request.method=='POST':\n",
    "        if request.files:\n",
    "            image=request.files[\"image\"]\n",
    "            if image.filename==\"\":\n",
    "                print(\"No Filename\")\n",
    "                return redirect(request.url)\n",
    "            if allowed_image(image.filename):\n",
    "                filename=secure_filename(image.filename)\n",
    "                \n",
    "                date_string = time.strftime(\"%Y-%m-%d-%H:%M\")\n",
    "                #saving image with date time stamp                \n",
    "                image.save(os.path.join(app.config[\"IMAGE_UPLOADS\"] + date_string +image.filename))\n",
    "                add=os.path.join(app.config[\"IMAGE_UPLOADS\"] + date_string +image.filename)\n",
    "                print(add)\n",
    "                image1=open(add,'rb')\n",
    "                image_read=image1.read()\n",
    "                #doing encoding of the image found\n",
    "                image_64_encode=base64.encodestring(image_read)\n",
    "                #hashing the encoded data\n",
    "                hashcode=hashlib.md5(image_64_encode)\n",
    "                new=image_64_encode.decode('utf-8')\n",
    "               \n",
    "                d={'b4': new}\n",
    "                print(d)\n",
    "                \n",
    "                #returning data in json\n",
    "                return json.dumps(d,sort_keys=True)\n",
    "            else:\n",
    "                print(\"extension not allowed\")\n",
    "                return redirect(request.url)\n",
    "                \n",
    "\n",
    "            \n",
    "            \n",
    "    return render_template(\"upload_image.html\")\n",
    " \n",
    "if __name__ == \"__main__\":\n",
    "    app.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
